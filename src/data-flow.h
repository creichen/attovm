/***************************************************************************
  Copyright (C) 2014 Christoph Reichenbach


 This program may be modified and copied freely according to the terms of
 the GNU general public license (GPL), as long as the above copyright
 notice and the licensing information contained herein are preserved.

 Please refer to www.gnu.org for licensing details.

 This work is provided AS IS, without warranty of any kind, expressed or
 implied, including but not limited to the warranties of merchantability,
 noninfringement, and fitness for a specific purpose. The author will not
 be held liable for any damage caused by this work or derivatives of it.

 By using this source code, you agree to the licensing terms as stated
 above.


 Please contact the maintainer for bug reports or inquiries.

 Current Maintainer:

    Christoph Reichenbach (CR) <creichen@gmail.com>

***************************************************************************/

#ifndef _ATTOL_DATA_FLOW_H
#define _ATTOL_DATA_FLOW_H

#include <bool.h>

typedef struct {
	
} flow_info_t;


typedef struct {
	//e forward analysis?  otherwise backward
	bool forward;
	//e name of the analysis
	char *name;

	/*e initialise set of data flow facts for given AST node
	 *
	 * @param out Pointer to the variable to write the initial dataflow fact to
	 * @param node AST node to initialise for
	 */
	void (*init)(void **out, ast_node_t *node);

	/*e
	 * Print out the given dataflow fact, for debugging/pretty-printing
	 *
	 * @param file The output stream to print to
	 * @param data The fact to print
	 */
	void (*print)(FILE *file, void *data);

	/*e
	 * Joins two dataflow facts
	 *
	 * @param in1, in2 The dataflow fact to join
	 * @return The joined dataflow fact
	 */
	void * (*join)(void *in1, void *in2);

	/*e
	 * Computes the effects of the transfer function for the given dataflow node
	 *
	 * @param ast The AST node generating the transfer function
	 * @return The dataflow fact generated by transferring `in' through `ast'
	 */
	void * (*transfer)(ast_node_t *ast, void *in);

	/*e
	 * Computes the effects of the transfer function for the given dataflow node
	 *
	 * @param lhs, rhs Left-hand side and right-hand side of the comparison
	 * @return True iff rhs carries at least as much information as lhs
	 */
	bool (*is_less_than)(void *lhs, void *rhs);

	/*e
	 * Deallocates a dataflow fact
	 *
	 * @param fact The fact to deallocate
	 */
	void (*free)(void *fact);
} data_flow_analysis_t;

/*e
 * Executes the dataflow analysis until a fixed point is reached
 */
void
dataflow_analyse(runtime_image_t *image, data_flow_analysis_t *analysis);

#endif // !defined(_ATTOL_DATA_FLOW_H)
